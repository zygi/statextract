// This file is auto-generated by @hey-api/openapi-ts

export const AuthorResponseSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        works: {
            items: {
                prefixItems: [
                    {
                        '$ref': '#/components/schemas/PaperMD'
                    },
                    {
                        anyOf: [
                            {
                                '$ref': '#/components/schemas/FullExtractionResult'
                            },
                            {
                                type: 'null'
                            }
                        ]
                    }
                ],
                type: 'array',
                maxItems: 2,
                minItems: 2
            },
            type: 'array',
            title: 'Works'
        }
    },
    type: 'object',
    required: ['name', 'id', 'works'],
    title: 'AuthorResponse'
} as const;

export const ClaimDetailsSuccessSchema = {
    properties: {
        tag: {
            type: 'string',
            enum: ['claim_details_success'],
            const: 'claim_details_success',
            title: 'Tag',
            default: 'claim_details_success'
        },
        claim: {
            '$ref': '#/components/schemas/DetailedClaimRequest'
        },
        pvalue: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pvalue'
        }
    },
    type: 'object',
    required: ['claim', 'pvalue'],
    title: 'ClaimDetailsSuccess'
} as const;

export const ClaimSummarySchema = {
    properties: {
        summary: {
            type: 'string',
            title: 'Summary',
            description: 'Claim summary.'
        },
        position_in_text: {
            type: 'string',
            title: 'Position In Text',
            description: 'The position of the claim in the text, described verbally.'
        }
    },
    type: 'object',
    required: ['summary', 'position_in_text'],
    title: 'ClaimSummary',
    description: 'A core claim of the paper that is supported by quantitative analysis and a statistical test.'
} as const;

export const ClaimsSchema = {
    properties: {
        chain_of_thought: {
            type: 'string',
            title: 'Chain Of Thought',
            description: 'The chain of thought you can use for reasoning.'
        },
        claims: {
            items: {
                '$ref': '#/components/schemas/ClaimSummary'
            },
            type: 'array',
            title: 'Claims',
            description: 'The list of claims. No more than 3.'
        }
    },
    type: 'object',
    required: ['chain_of_thought', 'claims'],
    title: 'Claims',
    description: `A collection of core claims of the paper that are supported by quantitative analysis and a statistical test.
Please only choose the most important claims of the paper. They should be 1) mentioned in the abstract, AND 2) supported by some kind of statistical test.

Output no more than 3 claims.`
} as const;

export const DetailedClaimRequestSchema = {
    properties: {
        chain_of_thought_md: {
            type: 'string',
            title: 'Chain Of Thought Md',
            description: 'First, you can choose to think through your answer here. You can use markdown formatting.'
        },
        claim_summary: {
            type: 'string',
            title: 'Claim Summary',
            description: 'The summary of the claim being made.'
        },
        statistical_support_summary_md: {
            type: 'string',
            title: 'Statistical Support Summary Md',
            description: "The summary of the statistical tests that support the claim, as well as the key test statistics and values. Specifically mention which statistical test was used by saying 'Statistical test: <test name>'. If you can't determine the test name, output 'Statistical test: UNKNOWN'. You can use markdown formatting."
        },
        statistical_support_page_number: {
            type: 'integer',
            title: 'Statistical Support Page Number',
            description: 'The page number of the article where the statistical support is located. This should be a number between 1 and the total number of pages (provided images) in the article.'
        },
        statistical_support_bounding_box: {
            prefixItems: [
                {
                    type: 'integer'
                },
                {
                    type: 'integer'
                },
                {
                    type: 'integer'
                },
                {
                    type: 'integer'
                }
            ],
            type: 'array',
            maxItems: 4,
            minItems: 4,
            title: 'Statistical Support Bounding Box',
            description: 'The bounding box of the statistical support in the article, contained in the page provided in `statistical_support_page_number`. The box should be a tight fitting box around the text of the claim, with 4 numbers, in the format (x1, y1, x2, y2). The box should be in the coordinate system of the article, with the top left corner being (0, 0) and the bottom right corner being (width, height). Use the rulers for reference. BE VERY SPECIFIC AND ONLY INCLUDE THE SUPPORTING SENTENCES, NOT HUGE BLOCKS OF TEXT.'
        },
        p_value_exact: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'P Value Exact',
            description: "If the paper reports an exact p-value for the claim (p = <value>), output it here. Otherwise, if it reports a bound like p < <value> or simply doesn't mention it, output None."
        },
        p_value_computed_R_script: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'P Value Computed R Script',
            description: "If the paper does NOT report an exact p-value, but does report test statistics that can be used to calculate it AND SPECIFICALLY MENTIONS WHICH STATISTICAL TEST WAS USED, output the calculation here. The calculation should be a valid R script that can be used to compute the p-value. It should take no external input - you should enter the numbers inline. Your script's final line should assign the p-value to a variable named `pvalue`. FOLLOW THE ARTICLE'S METHOD AS DESCRIBED AND DON'T MAKE ASSUMPTIONS. If you need to guess the statistical test, output null instead of guessing."
        },
        p_value_bound: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'P Value Bound',
            description: "As a last resort, if you cannot find the p-value in the article, and can't compute it from the test statistics, but the article reports a bount like p < <value>, return it here."
        }
    },
    type: 'object',
    required: ['chain_of_thought_md', 'claim_summary', 'statistical_support_summary_md', 'statistical_support_page_number', 'statistical_support_bounding_box', 'p_value_exact', 'p_value_computed_R_script', 'p_value_bound'],
    title: 'DetailedClaimRequest'
} as const;

export const FullExtractionResultSchema = {
    properties: {
        inner: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/FullExtractionResultSuccess'
                },
                {
                    '$ref': '#/components/schemas/WrappedAbort'
                }
            ],
            title: 'Inner',
            discriminator: {
                propertyName: 'tag',
                mapping: {
                    abort: '#/components/schemas/WrappedAbort',
                    success: '#/components/schemas/FullExtractionResultSuccess'
                }
            }
        }
    },
    type: 'object',
    required: ['inner'],
    title: 'FullExtractionResult'
} as const;

export const FullExtractionResultSuccessSchema = {
    properties: {
        tag: {
            type: 'string',
            enum: ['success'],
            const: 'success',
            title: 'Tag',
            default: 'success'
        },
        claims: {
            '$ref': '#/components/schemas/Claims'
        },
        detailed_claim_results: {
            items: {
                anyOf: [
                    {
                        oneOf: [
                            {
                                '$ref': '#/components/schemas/ClaimDetailsSuccess'
                            },
                            {
                                '$ref': '#/components/schemas/WrappedAbort'
                            }
                        ],
                        discriminator: {
                            propertyName: 'tag',
                            mapping: {
                                abort: '#/components/schemas/WrappedAbort',
                                claim_details_success: '#/components/schemas/ClaimDetailsSuccess'
                            }
                        }
                    },
                    {
                        type: 'null'
                    }
                ]
            },
            type: 'array',
            title: 'Detailed Claim Results'
        }
    },
    type: 'object',
    required: ['claims', 'detailed_claim_results'],
    title: 'FullExtractionResultSuccess'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const PaperMDSchema = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        },
        author_names: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Author Names'
        },
        first_author: {
            type: 'string',
            title: 'First Author'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        doi: {
            anyOf: [
                {
                    prefixItems: [
                        {
                            type: 'string'
                        },
                        {
                            type: 'string'
                        }
                    ],
                    type: 'array',
                    maxItems: 2,
                    minItems: 2
                },
                {
                    type: 'null'
                }
            ],
            title: 'Doi'
        },
        type: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Type'
        }
    },
    type: 'object',
    required: ['title', 'author_names', 'first_author', 'id', 'doi', 'type'],
    title: 'PaperMD'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const WorkResponseSchema = {
    properties: {
        md: {
            '$ref': '#/components/schemas/PaperMD'
        },
        images: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Images'
        },
        full_response: {
            '$ref': '#/components/schemas/FullExtractionResult'
        }
    },
    type: 'object',
    required: ['md', 'images', 'full_response'],
    title: 'WorkResponse'
} as const;

export const WrappedAbortSchema = {
    properties: {
        reason: {
            type: 'string',
            title: 'Reason',
            description: 'The reason why the task is impossible to complete to complete and should be aborted.'
        },
        tag: {
            type: 'string',
            enum: ['abort'],
            const: 'abort',
            title: 'Tag',
            default: 'abort'
        }
    },
    type: 'object',
    required: ['reason'],
    title: 'WrappedAbort'
} as const;