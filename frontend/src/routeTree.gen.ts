/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthorsImport } from './routes/authors'
import { Route as WorkIdImport } from './routes/work.$id'
import { Route as AuthorAuthorIdImport } from './routes/author.$authorId'

// Create/Update Routes

const AuthorsRoute = AuthorsImport.update({
  path: '/authors',
  getParentRoute: () => rootRoute,
} as any)

const WorkIdRoute = WorkIdImport.update({
  path: '/work/$id',
  getParentRoute: () => rootRoute,
} as any)

const AuthorAuthorIdRoute = AuthorAuthorIdImport.update({
  path: '/author/$authorId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/authors': {
      id: '/authors'
      path: '/authors'
      fullPath: '/authors'
      preLoaderRoute: typeof AuthorsImport
      parentRoute: typeof rootRoute
    }
    '/author/$authorId': {
      id: '/author/$authorId'
      path: '/author/$authorId'
      fullPath: '/author/$authorId'
      preLoaderRoute: typeof AuthorAuthorIdImport
      parentRoute: typeof rootRoute
    }
    '/work/$id': {
      id: '/work/$id'
      path: '/work/$id'
      fullPath: '/work/$id'
      preLoaderRoute: typeof WorkIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/authors': typeof AuthorsRoute
  '/author/$authorId': typeof AuthorAuthorIdRoute
  '/work/$id': typeof WorkIdRoute
}

export interface FileRoutesByTo {
  '/authors': typeof AuthorsRoute
  '/author/$authorId': typeof AuthorAuthorIdRoute
  '/work/$id': typeof WorkIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/authors': typeof AuthorsRoute
  '/author/$authorId': typeof AuthorAuthorIdRoute
  '/work/$id': typeof WorkIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/authors' | '/author/$authorId' | '/work/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/authors' | '/author/$authorId' | '/work/$id'
  id: '__root__' | '/authors' | '/author/$authorId' | '/work/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthorsRoute: typeof AuthorsRoute
  AuthorAuthorIdRoute: typeof AuthorAuthorIdRoute
  WorkIdRoute: typeof WorkIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthorsRoute: AuthorsRoute,
  AuthorAuthorIdRoute: AuthorAuthorIdRoute,
  WorkIdRoute: WorkIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/authors",
        "/author/$authorId",
        "/work/$id"
      ]
    },
    "/authors": {
      "filePath": "authors.tsx"
    },
    "/author/$authorId": {
      "filePath": "author.$authorId.tsx"
    },
    "/work/$id": {
      "filePath": "work.$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
